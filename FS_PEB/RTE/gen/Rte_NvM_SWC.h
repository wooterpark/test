/** @file     Rte_NvM_SWC.h
  *
  * @brief    Application header file
  *
  * @note     AUTOMATICALLY GENERATED FILE! DO NOT EDIT!
  *
  * @note     Generated by ETAS RTA-RTE
  * @note     Version 6.6.0 
  */

#ifndef RTE_NVM_SWC_H
#define RTE_NVM_SWC_H

#ifndef RTE_CORE
#ifdef RTE_APPLICATION_HEADER_FILE
#error Multiple application header files included.
#endif /* RTE_APPLICATION_HEADER_FILE */
#define RTE_APPLICATION_HEADER_FILE
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Includes
 ***
 *******************************************************/

#include "Rte.h"
#include "Rte_Intl.h"
#include "Rte_NvM_SWC_Type.h"

#include "Rte_DataHandleType.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#if defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
   /* Do nothing for this and all elif clauses below (rte_sws_2751) */
#else
   /* None of above defined so define value including all APIs (rte_sws_2751) */
   #define RTE_PRV_ALL_API
#endif

/*******************************************************
 ***
 *** Constants
 ***
 *******************************************************/

#ifndef RTE_CORE
#define RTE_E_EcuM_ShutdownTarget_E_NOT_OK ((Std_ReturnType)1)
#define RTE_E_NvMService_E_NOT_OK ((Std_ReturnType)1)
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Public Types
 ***
 *******************************************************/

/* BEGIN: SWC types (core visible) */
struct Rte_CDS_NvM_SWC {
   /* Per-Instance Memorys (sic) */
   P2VAR(Rte_PimType_NvM_SWC_NvM_SWC_BlockNative_1024_Type   , AUTOMATIC, RTE_DATA) Pim_NvM_SWC_BlockNative_1024;
   P2VAR(Rte_PimType_NvM_SWC_NvM_SWC_BlockRedundant_1024_Type, AUTOMATIC, RTE_DATA) Pim_NvM_SWC_BlockRedundant_1024;
};
typedef struct Rte_CDS_NvM_SWC Rte_CDS_NvM_SWC;
/* END: SWC types (core visible) */

/*******************************************************
 ***
 *** Private Types
 ***
 *******************************************************/

/* BEGIN: SWC types (private) */
#ifndef RTE_CORE
typedef Rte_PimType_NvM_SWC_NvM_SWC_BlockNative_1024_Type NvM_SWC_BlockNative_1024_Type;
typedef Rte_PimType_NvM_SWC_NvM_SWC_BlockRedundant_1024_Type NvM_SWC_BlockRedundant_1024_Type;
#endif /* RTE_CORE */

/* END: SWC types (private) */

/*******************************************************
 ***
 *** Instance Declarations
 ***
 *******************************************************/

#define RTE_START_SEC_Partition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern CONST(struct Rte_CDS_NvM_SWC, RTE_CONST) Rte_Inst_NvM_SWC;
#define RTE_STOP_SEC_Partition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */


#ifndef RTE_CORE
typedef CONSTP2CONST(struct Rte_CDS_NvM_SWC, AUTOMATIC, RTE_CONST) Rte_Instance;
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** API Mapping macros
 ***
 *******************************************************/

/* API Mapping Macros */
#ifndef RTE_CORE

#define RTE_NVM_SWC_START_SEC_CODE
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(Std_ReturnType, RTE_CODE) Rte_Write_NvM_SWC_PP_SWC_NvM_NvM_AngAutoClbOffset(VAR(float32, AUTOMATIC) data);
FUNC(Std_ReturnType, RTE_CODE) Rte_Write_NvM_SWC_PP_SWC_NvM_NvM_flgAngAutoClbOffset(VAR(boolean, AUTOMATIC) data);
#define RTE_NVM_SWC_STOP_SEC_CODE
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_Partition_Core0_VAR_CLEARED_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(Rte_PimType_NvM_SWC_NvM_SWC_BlockNative_1024_Type, RTE_APPL_DATA) Rte_CPim_NvM_SWC_NvM_SWC_BlockNative_1024;
#define RTE_STOP_SEC_Partition_Core0_VAR_CLEARED_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_Partition_Core0_VAR_CLEARED_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(Rte_PimType_NvM_SWC_NvM_SWC_BlockRedundant_1024_Type, RTE_APPL_DATA) Rte_CPim_NvM_SWC_NvM_SWC_BlockRedundant_1024;
#define RTE_STOP_SEC_Partition_Core0_VAR_CLEARED_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_Partition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(boolean, RTE_DATA) Rte_Rx_000134_NvM_SLFnh;
#define RTE_STOP_SEC_Partition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_Partition_Core0_VAR_CLEARED_32
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(float32, RTE_DATA) Rte_Rx_000135_NvM_SLInPLimt;
#define RTE_STOP_SEC_Partition_Core0_VAR_CLEARED_32
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_Partition_Core0_VAR_CLEARED_32
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(float32, RTE_DATA) Rte_Rx_000140_PCF_SLInPLimt;
#define RTE_STOP_SEC_Partition_Core0_VAR_CLEARED_32
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_Partition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(boolean, RTE_DATA) Rte_Rx_000145_PCF_flgSLWD;
#define RTE_STOP_SEC_Partition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_Partition_Core0_VAR_CLEARED_32
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(float32, RTE_DATA) Rte_Rx_000155_RCF_AutoClbOffset;
#define RTE_STOP_SEC_Partition_Core0_VAR_CLEARED_32
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#define RTE_START_SEC_Partition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern VAR(boolean, RTE_DATA) Rte_Rx_000162_RCF_flgOfsClbSucToNVM;
#define RTE_STOP_SEC_Partition_Core0_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockNative_1024_EraseBlock to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockNative_1024_EraseBlock()  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockNative_1024_GetDataIndex to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockNative_1024_GetDataIndex( DataIndexPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockNative_1024_GetErrorStatus to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockNative_1024_GetErrorStatus( RequestResultPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockNative_1024_InvalidateNvBlock to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockNative_1024_InvalidateNvBlock()  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockNative_1024_ReadBlock to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockNative_1024_ReadBlock( DstPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockNative_1024_RestoreBlockDefaults to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockNative_1024_RestoreBlockDefaults( DstPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockNative_1024_SetDataIndex to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockNative_1024_SetDataIndex( DataIndex )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockNative_1024_SetRamBlockStatus to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockNative_1024_SetRamBlockStatus( BlockChanged )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockNative_1024_WriteBlock to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockNative_1024_WriteBlock( SrcPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_EraseBlock to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_EraseBlock()  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_GetDataIndex to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_GetDataIndex( DataIndexPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_GetErrorStatus to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_GetErrorStatus( RequestResultPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_InvalidateNvBlock to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_InvalidateNvBlock()  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_ReadBlock to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_ReadBlock( DstPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_RestoreBlockDefaults to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_RestoreBlockDefaults( DstPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_SetDataIndex to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_SetDataIndex( DataIndex )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_SetRamBlockStatus to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_SetRamBlockStatus( BlockChanged )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_WriteBlock to direct read */
#define Rte_Call_RPort_NvM_SWC_BlockRedundant_1024_WriteBlock( SrcPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_ShutdownTarget_GetLastShutdownTarget to direct read */
#define Rte_Call_RPort_ShutdownTarget_GetLastShutdownTarget( shutdownTarget, shutdownMode )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_ShutdownTarget_GetShutdownCause to direct read */
#define Rte_Call_RPort_ShutdownTarget_GetShutdownCause( shutdownCause )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_ShutdownTarget_GetShutdownTarget to direct read */
#define Rte_Call_RPort_ShutdownTarget_GetShutdownTarget( shutdownTarget, shutdownMode )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_ShutdownTarget_SelectShutdownCause to direct read */
#define Rte_Call_RPort_ShutdownTarget_SelectShutdownCause( shutdownCause )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Call_RPort_ShutdownTarget_SelectShutdownTarget to direct read */
#define Rte_Call_RPort_ShutdownTarget_SelectShutdownTarget( shutdownTarget, shutdownMode )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
/* Inline read optimization; Rte_Pim_NvM_SWC_BlockNative_1024 to direct read */
#define Rte_Pim_NvM_SWC_BlockNative_1024()  ( (P2VAR(NvM_SWC_BlockNative_1024_Type, AUTOMATIC, RTE_APPL_DATA)) &Rte_CPim_NvM_SWC_NvM_SWC_BlockNative_1024 )
/* Inline read optimization; Rte_Pim_NvM_SWC_BlockRedundant_1024 to direct read */
#define Rte_Pim_NvM_SWC_BlockRedundant_1024()  ( (P2VAR(NvM_SWC_BlockRedundant_1024_Type, AUTOMATIC, RTE_APPL_DATA)) &Rte_CPim_NvM_SWC_NvM_SWC_BlockRedundant_1024 )
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Read_RP_SWC_PCF_PCF_SLInPLimt to direct access */
#define Rte_Read_RP_SWC_PCF_PCF_SLInPLimt( data )  ( ((*(data)) = Rte_Rx_000140_PCF_SLInPLimt),((VAR(Std_ReturnType, AUTOMATIC))RTE_E_OK) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Read_RP_SWC_PCF_PCF_flgSLWD to direct access */
#define Rte_Read_RP_SWC_PCF_PCF_flgSLWD( data )  ( ((*(data)) = Rte_Rx_000145_PCF_flgSLWD),((VAR(Std_ReturnType, AUTOMATIC))RTE_E_OK) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Read_RP_SWC_RCF_RCF_AutoClbOffset to direct access */
#define Rte_Read_RP_SWC_RCF_RCF_AutoClbOffset( data )  ( ((*(data)) = Rte_Rx_000155_RCF_AutoClbOffset),((VAR(Std_ReturnType, AUTOMATIC))RTE_E_OK) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline read optimization; Rte_Read_RP_SWC_RCF_RCF_flgOfsClbSucToNVM to direct access */
#define Rte_Read_RP_SWC_RCF_RCF_flgOfsClbSucToNVM( data )  ( ((*(data)) = Rte_Rx_000162_RCF_flgOfsClbSucToNVM),((VAR(Std_ReturnType, AUTOMATIC))RTE_E_OK) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
#define Rte_Write_PP_SWC_NvM_NvM_AngAutoClbOffset( data ) (Rte_Write_NvM_SWC_PP_SWC_NvM_NvM_AngAutoClbOffset(data))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline Write optimization; Rte_Write_PP_SWC_NvM_NvM_SLFnh to direct write */
#define Rte_Write_PP_SWC_NvM_NvM_SLFnh( data ) ( (Rte_Rx_000134_NvM_SLFnh = data), RTE_E_OK )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline Write optimization; Rte_Write_PP_SWC_NvM_NvM_SLInPLimt to direct write */
#define Rte_Write_PP_SWC_NvM_NvM_SLInPLimt( data ) ( (Rte_Rx_000135_NvM_SLInPLimt = data), RTE_E_OK )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
#define Rte_Write_PP_SWC_NvM_NvM_flgAngAutoClbOffset( data ) (Rte_Write_NvM_SWC_PP_SWC_NvM_NvM_flgAngAutoClbOffset(data))
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_NvM_SWC)
/* Inline write optimization; Rte_Write_PPort_NvM_Request_Shutdown_uint16 to null body */
#define Rte_Write_PPort_NvM_Request_Shutdown_uint16( data )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_OK) )
#endif

#endif /* RTE_CORE */

/*******************************************************
 ***
 *** RE Prototypes
 ***
 *******************************************************/

#define NvM_SWC_START_SEC_CODE
#include "NvM_SWC_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(void, NvM_SWC_CODE) RE_NvM_SWC_func(void);
#define NvM_SWC_STOP_SEC_CODE
#include "NvM_SWC_MemMap.h" /*lint !e537 permit multiple inclusion */

/* Initial values for data element prototypes */

#ifdef __cplusplus
} /* extern C */
#endif /* __cplusplus */

#endif /* !RTE_NVM_SWC_H */
