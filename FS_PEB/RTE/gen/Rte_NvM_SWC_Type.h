/** @file     Rte_NvM_SWC_Type.h
  *
  * @brief    Application types header file
  *
  * @note     AUTOMATICALLY GENERATED FILE! DO NOT EDIT!
  *
  * @note     Generated by ETAS RTA-RTE
  * @note     Version 6.6.0 
  */

#ifndef RTE_NvM_SWC_TYPE_H
#define RTE_NvM_SWC_TYPE_H

#include "Rte_Type.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* BEGIN: SWC specific types */
/* END: SWC specific types */

/* BEGIN: SWC specific definitions */
#if !defined(RTE_CORE)

/* Box: /AUTOSAR_EcuM/ImplementationDataTypes/EcuM_ShutdownCauseType begin */
/* Box: ECUM_CAUSE_UNKNOWN ("ECUM_CAUSE_UNKNOWN") begin */
#ifndef ECUM_CAUSE_UNKNOWN
#define ECUM_CAUSE_UNKNOWN (0U)
#endif /* !ECUM_CAUSE_UNKNOWN */
/* Box: ECUM_CAUSE_UNKNOWN ("ECUM_CAUSE_UNKNOWN") end */
/* Box: ECUM_CAUSE_ECU_STATE ("ECUM_CAUSE_ECU_STATE") begin */
#ifndef ECUM_CAUSE_ECU_STATE
#define ECUM_CAUSE_ECU_STATE (1U)
#endif /* !ECUM_CAUSE_ECU_STATE */
/* Box: ECUM_CAUSE_ECU_STATE ("ECUM_CAUSE_ECU_STATE") end */
/* Box: ECUM_CAUSE_WDGM ("ECUM_CAUSE_WDGM") begin */
#ifndef ECUM_CAUSE_WDGM
#define ECUM_CAUSE_WDGM (2U)
#endif /* !ECUM_CAUSE_WDGM */
/* Box: ECUM_CAUSE_WDGM ("ECUM_CAUSE_WDGM") end */
/* Box: ECUM_CAUSE_DCM ("ECUM_CAUSE_DCM") begin */
#ifndef ECUM_CAUSE_DCM
#define ECUM_CAUSE_DCM (3U)
#endif /* !ECUM_CAUSE_DCM */
/* Box: ECUM_CAUSE_DCM ("ECUM_CAUSE_DCM") end */
/* Box: /AUTOSAR_EcuM/ImplementationDataTypes/EcuM_ShutdownCauseType end */

/* Box: /AUTOSAR_EcuM/ImplementationDataTypes/EcuM_ShutdownModeType begin */
/* Box: ECUM_RESET_MCU ("ECUM_RESET_MCU") begin */
#ifndef ECUM_RESET_MCU
#define ECUM_RESET_MCU (0U)
#endif /* !ECUM_RESET_MCU */
/* Box: ECUM_RESET_MCU ("ECUM_RESET_MCU") end */
/* Box: ECUM_RESET_WDGM ("ECUM_RESET_WDGM") begin */
#ifndef ECUM_RESET_WDGM
#define ECUM_RESET_WDGM (1U)
#endif /* !ECUM_RESET_WDGM */
/* Box: ECUM_RESET_WDGM ("ECUM_RESET_WDGM") end */
/* Box: ECUM_RESET_IO ("ECUM_RESET_IO") begin */
#ifndef ECUM_RESET_IO
#define ECUM_RESET_IO (2U)
#endif /* !ECUM_RESET_IO */
/* Box: ECUM_RESET_IO ("ECUM_RESET_IO") end */
/* Box: /AUTOSAR_EcuM/ImplementationDataTypes/EcuM_ShutdownModeType end */

/* Box: /AUTOSAR_EcuM/ImplementationDataTypes/EcuM_ShutdownTargetType begin */
/* Box: ECUM_SHUTDOWN_TARGET_SLEEP ("ECUM_SHUTDOWN_TARGET_SLEEP") begin */
#ifndef ECUM_SHUTDOWN_TARGET_SLEEP
#define ECUM_SHUTDOWN_TARGET_SLEEP (0U)
#endif /* !ECUM_SHUTDOWN_TARGET_SLEEP */
/* Box: ECUM_SHUTDOWN_TARGET_SLEEP ("ECUM_SHUTDOWN_TARGET_SLEEP") end */
/* Box: ECUM_SHUTDOWN_TARGET_RESET ("ECUM_SHUTDOWN_TARGET_RESET") begin */
#ifndef ECUM_SHUTDOWN_TARGET_RESET
#define ECUM_SHUTDOWN_TARGET_RESET (1U)
#endif /* !ECUM_SHUTDOWN_TARGET_RESET */
/* Box: ECUM_SHUTDOWN_TARGET_RESET ("ECUM_SHUTDOWN_TARGET_RESET") end */
/* Box: ECUM_SHUTDOWN_TARGET_OFF ("ECUM_SHUTDOWN_TARGET_OFF") begin */
#ifndef ECUM_SHUTDOWN_TARGET_OFF
#define ECUM_SHUTDOWN_TARGET_OFF (2U)
#endif /* !ECUM_SHUTDOWN_TARGET_OFF */
/* Box: ECUM_SHUTDOWN_TARGET_OFF ("ECUM_SHUTDOWN_TARGET_OFF") end */
/* Box: /AUTOSAR_EcuM/ImplementationDataTypes/EcuM_ShutdownTargetType end */

/* Box: /AUTOSAR_NvM/ImplementationDataTypes/NvM_RequestResultType begin */
/* Box: "NVM_REQ_OK" begin */
#ifndef NVM_REQ_OK
#define NVM_REQ_OK (0U)
#endif /* !NVM_REQ_OK */
/* Box: "NVM_REQ_OK" end */
/* Box: "NVM_REQ_NOT_OK" begin */
#ifndef NVM_REQ_NOT_OK
#define NVM_REQ_NOT_OK (1U)
#endif /* !NVM_REQ_NOT_OK */
/* Box: "NVM_REQ_NOT_OK" end */
/* Box: "NVM_REQ_PENDING" begin */
#ifndef NVM_REQ_PENDING
#define NVM_REQ_PENDING (2U)
#endif /* !NVM_REQ_PENDING */
/* Box: "NVM_REQ_PENDING" end */
/* Box: "NVM_REQ_INTEGRITY_FAILED" begin */
#ifndef NVM_REQ_INTEGRITY_FAILED
#define NVM_REQ_INTEGRITY_FAILED (3U)
#endif /* !NVM_REQ_INTEGRITY_FAILED */
/* Box: "NVM_REQ_INTEGRITY_FAILED" end */
/* Box: "NVM_REQ_BLOCK_SKIPPED" begin */
#ifndef NVM_REQ_BLOCK_SKIPPED
#define NVM_REQ_BLOCK_SKIPPED (4U)
#endif /* !NVM_REQ_BLOCK_SKIPPED */
/* Box: "NVM_REQ_BLOCK_SKIPPED" end */
/* Box: "NVM_REQ_NV_INVALIDATED" begin */
#ifndef NVM_REQ_NV_INVALIDATED
#define NVM_REQ_NV_INVALIDATED (5U)
#endif /* !NVM_REQ_NV_INVALIDATED */
/* Box: "NVM_REQ_NV_INVALIDATED" end */
/* Box: "NVM_REQ_CANCELED" begin */
#ifndef NVM_REQ_CANCELED
#define NVM_REQ_CANCELED (6U)
#endif /* !NVM_REQ_CANCELED */
/* Box: "NVM_REQ_CANCELED" end */
/* Box: "NVM_REQ_REDUNDANCY_FAILED" begin */
#ifndef NVM_REQ_REDUNDANCY_FAILED
#define NVM_REQ_REDUNDANCY_FAILED (7U)
#endif /* !NVM_REQ_REDUNDANCY_FAILED */
/* Box: "NVM_REQ_REDUNDANCY_FAILED" end */
/* Box: "NVM_REQ_RESTORED_FROM_ROM" begin */
#ifndef NVM_REQ_RESTORED_FROM_ROM
#define NVM_REQ_RESTORED_FROM_ROM (8U)
#endif /* !NVM_REQ_RESTORED_FROM_ROM */
/* Box: "NVM_REQ_RESTORED_FROM_ROM" end */
/* Box: /AUTOSAR_NvM/ImplementationDataTypes/NvM_RequestResultType end */

/* Box: /AUTOSAR_Platform/ImplementationDataTypes/boolean begin */
/* Box: "FALSE" begin */
#ifndef FALSE
#define FALSE (0U)
#endif /* !FALSE */
/* Box: "FALSE" end */
/* Box: "TRUE" begin */
#ifndef TRUE
#define TRUE (1U)
#endif /* !TRUE */
/* Box: "TRUE" end */
/* Box: /AUTOSAR_Platform/ImplementationDataTypes/boolean end */
#endif /* !defined(RTE_CORE) */
/* END: SWC specific definitions */

#ifdef __cplusplus
} /* extern C */
#endif /* __cplusplus */

#endif /* !RTE_NvM_SWC_TYPE_H */
