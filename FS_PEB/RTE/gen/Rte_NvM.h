/** @file     Rte_NvM.h
  *
  * @brief    Application header file
  *
  * @note     AUTOMATICALLY GENERATED FILE! DO NOT EDIT!
  *
  * @note     Generated by ETAS RTA-RTE
  * @note     Version 6.6.0 
  */

#ifndef RTE_NVM_H
#define RTE_NVM_H

#ifndef RTE_CORE
#ifdef RTE_APPLICATION_HEADER_FILE
#error Multiple application header files included.
#endif /* RTE_APPLICATION_HEADER_FILE */
#define RTE_APPLICATION_HEADER_FILE
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Includes
 ***
 *******************************************************/

#include "Rte.h"
#include "Rte_Intl.h"
#include "Rte_NvM_Type.h"

#include "Rte_DataHandleType.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#if defined(RTE_RUNNABLEAPI_EraseNvBlock)
   /* Do nothing for this and all elif clauses below (rte_sws_2751) */
#elif defined(RTE_RUNNABLEAPI_GetDataIndex)
#elif defined(RTE_RUNNABLEAPI_GetErrorStatus)
#elif defined(RTE_RUNNABLEAPI_InvalidateNvBlock)
#elif defined(RTE_RUNNABLEAPI_MainFunction)
#elif defined(RTE_RUNNABLEAPI_ReadBlock)
#elif defined(RTE_RUNNABLEAPI_RestoreBlockDefaults)
#elif defined(RTE_RUNNABLEAPI_SetBlockProtection)
#elif defined(RTE_RUNNABLEAPI_SetDataIndex)
#elif defined(RTE_RUNNABLEAPI_SetRamBlockStatus)
#elif defined(RTE_RUNNABLEAPI_WriteBlock)
#else
   /* None of above defined so define value including all APIs (rte_sws_2751) */
   #define RTE_PRV_ALL_API
#endif

/*******************************************************
 ***
 *** Constants
 ***
 *******************************************************/

#ifndef RTE_CORE
#define RTE_E_NvMService_E_NOT_OK ((Std_ReturnType)1)
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Public Types
 ***
 *******************************************************/

/* BEGIN: SWC types (core visible) */
struct Rte_CDS_NvM {
   uint8 Rte_Dummy;
};
typedef struct Rte_CDS_NvM Rte_CDS_NvM;
/* END: SWC types (core visible) */

/*******************************************************
 ***
 *** Private Types
 ***
 *******************************************************/

/* BEGIN: SWC types (private) */
/* END: SWC types (private) */

/*******************************************************
 ***
 *** Instance Declarations
 ***
 *******************************************************/

#define RTE_START_SEC_Partition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */
extern CONST(struct Rte_CDS_NvM, RTE_CONST) Rte_Inst_NvM;
#define RTE_STOP_SEC_Partition_Core0_CONST_UNSPECIFIED
#include "Rte_MemMap.h" /*lint !e537 permit multiple inclusion */


#ifndef RTE_CORE
typedef CONSTP2CONST(struct Rte_CDS_NvM, AUTOMATIC, RTE_CONST) Rte_Instance;
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** API Mapping macros
 ***
 *******************************************************/

/* API Mapping Macros */
#ifndef RTE_CORE

#endif /* RTE_CORE */

/*******************************************************
 ***
 *** RE Prototypes
 ***
 *******************************************************/

#define NvM_START_SEC_CODE
#include "NvM_MemMap.h" /*lint !e537 permit multiple inclusion */
FUNC(Std_ReturnType, NvM_CODE) NvM_EraseNvBlock(VAR(NvM_BlockIdType, AUTOMATIC) Rte_PDAV0);
FUNC(Std_ReturnType, NvM_CODE) NvM_GetDataIndex(VAR(NvM_BlockIdType, AUTOMATIC) Rte_PDAV0,
                                                CONSTP2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) DataIndexPtr);
FUNC(Std_ReturnType, NvM_CODE) NvM_GetErrorStatus(VAR(NvM_BlockIdType, AUTOMATIC) Rte_PDAV0,
                                                  CONSTP2VAR(NvM_RequestResultType, AUTOMATIC, RTE_APPL_DATA) RequestResultPtr);
FUNC(Std_ReturnType, NvM_CODE) NvM_InvalidateNvBlock(VAR(NvM_BlockIdType, AUTOMATIC) Rte_PDAV0);
FUNC(Std_ReturnType, NvM_CODE) NvM_ReadBlock(VAR(NvM_BlockIdType, AUTOMATIC) Rte_PDAV0,
                                             VAR(NvM_Rb_VoidPtr, AUTOMATIC) DstPtr);
FUNC(Std_ReturnType, NvM_CODE) NvM_RestoreBlockDefaults(VAR(NvM_BlockIdType, AUTOMATIC) Rte_PDAV0,
                                                        VAR(NvM_Rb_VoidPtr, AUTOMATIC) DstPtr);
FUNC(Std_ReturnType, NvM_CODE) NvM_SetDataIndex(VAR(NvM_BlockIdType, AUTOMATIC) Rte_PDAV0,
                                                VAR(uint8, AUTOMATIC) DataIndex);
FUNC(Std_ReturnType, NvM_CODE) NvM_SetRamBlockStatus(VAR(NvM_BlockIdType, AUTOMATIC) Rte_PDAV0,
                                                     VAR(boolean, AUTOMATIC) BlockChanged);
FUNC(Std_ReturnType, NvM_CODE) NvM_WriteBlock(VAR(NvM_BlockIdType, AUTOMATIC) Rte_PDAV0,
                                              VAR(NvM_Rb_ConstVoidPtr, AUTOMATIC) SrcPtr);
#define NvM_STOP_SEC_CODE
#include "NvM_MemMap.h" /*lint !e537 permit multiple inclusion */

/* Initial values for data element prototypes */

#ifdef __cplusplus
} /* extern C */
#endif /* __cplusplus */

#endif /* !RTE_NVM_H */
